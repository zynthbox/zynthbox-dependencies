name: Build zynthbox plugins debs
run-name: Build zynthbox plugins debs - ${{ github.event.inputs.package_name }}

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: 'Package Name'
        required: true
        type: choice
        options:
        # The name should be same as the folder name in the repository
        - synthv1-lv2
        - synthv1-lv2-1.3.2
        - tap-lv2
        - swh
        - surge
        - raffo
        - moony-lv2
        - njconnect
        - sonobus
        - sunshine
        - distrho-plugin-ports-lv2
        - airwin2rack
        - regrader
        - remid
        - punk-console
        - preset2lv2
        - padthv1-lv2

jobs:
  build:
    name: Build ${{ inputs.package_name }} plugin
    runs-on: ubuntu-22.04-arm
    container:
      image: ghcr.io/probal31/zynthbox-packaging:arm64
      env:
        DEBIAN_FRONTEND: noninteractive
        APTLY_REPO: testing
        RELEASE: bookworm
        BUILDING_ZYNTHBOX_DEPENDENCY: 1
        SKIP_ZYNTHBOX_DEPENDENCIES_INSTALLATION: 0

    steps:
      - name: Set sourcelink based on choice
        id: setup
        run: |
          case "${{ inputs.package_name }}" in
          synthv1-lv2)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/synthv1-lv2-1.3.0.tar.gz" >> $GITHUB_OUTPUT
            ;;
          synthv1-lv2-1.3.2)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/synthv1-lv2-1.3.2.tar.gz" >> $GITHUB_OUTPUT
            ;;
          tap-lv2)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/tap-lv2-20180221.tar.gz" >> $GITHUB_OUTPUT
            ;;
          swh)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/swh-git+8b6d075.tar.gz" >> $GITHUB_OUTPUT
            ;;
          surge)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/surge-1.3.4.tar.gz" >> $GITHUB_OUTPUT
            ;;
          raffo)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/raffo-git+e2731c9.tar.gz" >> $GITHUB_OUTPUT
            ;;
          moony-lv2)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/moony-lv2-0.40.0.tar.gz" >> $GITHUB_OUTPUT
            ;;
          njconnect)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/njconnect-1.6.tar.gz" >> $GITHUB_OUTPUT
            ;;
          sonobus)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/sonobus-1.7.2.tar.gz" >> $GITHUB_OUTPUT
            ;;
          sunshine)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/Sunshine-v2025.122.141614.tar.gz" >> $GITHUB_OUTPUT
            ;;
          distrho-plugin-ports-lv2)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/distrho-plugin-ports-lv2-20210315.tar.gz" >> $GITHUB_OUTPUT
            ;;
          airwin2rack)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/airwin2rack-2.12.0.tar.gz" >> $GITHUB_OUTPUT
            ;;
          regrader)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/regrader-1.0.0.tar.gz" >> $GITHUB_OUTPUT
            ;;
          remid)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/remid-git+7427f1b.tar.gz" >> $GITHUB_OUTPUT
            ;;
          punk-console)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/punk-console-git+4836cd1.tar.gz" >> $GITHUB_OUTPUT
            ;;
          preset2lv2)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/preset2lv2-git+0dc5ef07.tar.gz" >> $GITHUB_OUTPUT
            ;;
          padthv1-lv2)
            echo "sourcelink=https://github.com/zynthbox/zynthbox-dependencies/releases/download/RC-5/padthv1-lv2-1.3.0.tar.gz" >> $GITHUB_OUTPUT
            ;;
          *)
            echo "Unknown choice"
            exit 1
            ;;
          esac

      - name: Clone repo shallowly
        run: |
          git clone --depth 1 https://github.com/${{ github.repository }}.git repo
  
      - name: Extract folder contents at root
        run: |
          cd repo
          git archive HEAD:${{ github.event.inputs.package_name }} | tar -x -C ../
          cd ..
          rm -rf repo

      - name: Set custom workflow title
        run: |
          echo "### Building zynthbox plugin: ${{ github.event.inputs.package_name }}" >> $GITHUB_STEP_SUMMARY

      - name: Download tar from github release and create orig.tar.gz
        run: |
          PACKAGE_NAME=$(dpkg-parsechangelog --show-field Source)
          PACKAGE_VERSION=$(dpkg-parsechangelog --show-field Version | sed 's/-[^-]*$//')

          # Keep the debian folder backup
          mv debian debian.bkup

          wget -O ../${PACKAGE_NAME}_${PACKAGE_VERSION}.orig.tar.gz ${{ steps.setup.outputs.sourcelink }}
          tar -xf ../${PACKAGE_NAME}_${PACKAGE_VERSION}.orig.tar.gz -C ./ --strip-components=1

          rm -rf debian
          mv debian.bkup debian

          
      - name: Build DEB using Debhelper
        run: |
          set -x

          # Ensuring key security
          mkdir -p ~/.ssh
          echo "${{ secrets.APTLY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan repo.zynthbox.io >> ~/.ssh/known_hosts

          # Zynthbox repo
          curl -L https://repo.zynthbox.io/repo_key.pub | apt-key add -;
          if [ "$RELEASE" = "bookworm" ]; then
            echo "deb https://repo.zynthbox.io/testing-bookworm/ bookworm main" | tee "/etc/apt/sources.list.d/zynthbox.list"
            echo "deb https://repo.zynthbox.io/kxstudio/ bookworm main" | tee "/etc/apt/sources.list.d/zynthbox-kxstudio.list"
            echo "deb https://repo.zynthbox.io/deb-multimedia/ bookworm main" | tee "/etc/apt/sources.list.d/zynthbox-debmultimedia.list"
          else
            echo "UNKNOWN RELEASE $RELEASE"
          fi

          # lv2-dev package from kxstudio is missing header files. Give priority to deb-multimedia one when installing and make sure kxstudio one never gets installed
          echo "Package: lv2-dev" >> /etc/apt/preferences.d/lv2-dev
          echo "Pin: origin www.deb-multimedia.org" >> /etc/apt/preferences.d/lv2-dev
          echo "Pin-Priority: 1001" >> /etc/apt/preferences.d/lv2-dev
          echo "" >> /etc/apt/preferences.d/lv2-dev
          echo "Package: lv2-dev" >> /etc/apt/preferences.d/lv2-dev
          echo "Pin: origin ppa.launchpad.net" >> /etc/apt/preferences.d/lv2-dev
          echo "Pin-Priority: 1" >> /etc/apt/preferences.d/lv2-dev
          echo "" >> /etc/apt/preferences.d/lv2-dev

          ### Make the aptly jobs wait on a global lock file so that the aptly jobs are mutually exclusive
          ### Create a lock file /tmp/publish-aptly-zynthbox.lock and cleanup before completing the job
          echo "Checking if /tmp/publish-aptly-zynthbox.lock exists"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa aptly@repo.zynthbox.io 'while [ -f /tmp/publish-aptly-zynthbox.lock ]; do echo "/tmp/publish-aptly-zynthbox.lock exists. Waiting for other publish jobs to finish first"; sleep 5; done'

          # Set C/CXX FLAGS to optimize builds for RPI4
          export CFLAGS="-ftree-vectorize -O2 -pipe -fomit-frame-pointer"
          export CXXFLAGS="${CFLAGS}"
          export CFLAGS_UNSAFE=""

          # Create world writable gnupg home
          export GNUPGHOME=$(mktemp -d /tmp/.gnupgXXXXXX)
          chmod 777 $GNUPGHOME

          # Create dpkg-buildpackage config to disable signing of source, build and changes files when generating debs
          echo "unsigned-source" >> /etc/dpkg/buildpackage.conf
          echo "unsigned-buildinfo" >> /etc/dpkg/buildpackage.conf
          echo "unsigned-changes" >> /etc/dpkg/buildpackage.conf
          set +x

          # Install the build dependencies reading the Build-Depends in the debian/control file
          apt-get update
          apt-get -y build-dep .

          dpkg-buildpackage -us -uc -b

      - name: Upload deb to aptly repo
        run: |
          set -x
          echo "Updating repository info"
          apt update

          mkdir -p ~/.ssh
          echo "${{ secrets.APTLY_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan repo.zynthbox.io >> ~/.ssh/known_hosts

          ### Make the aptly jobs wait on a global lock file so that the aptly jobs are mutually exclusive
          ### Create a lock file /tmp/publish-aptly-zynthbox.lock and cleanup before completing the job
          echo "Checking if /tmp/publish-aptly-zynthbox.lock exists"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa aptly@repo.zynthbox.io 'while [ -f /tmp/publish-aptly-zynthbox.lock ]; do echo "/tmp/publish-aptly-zynthbox.lock exists. Waiting for other publish jobs to finish first"; sleep 5; done'
          echo "Creating lock file /tmp/publish-aptly-zynthbox.lock"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa aptly@repo.zynthbox.io 'touch /tmp/publish-aptly-zynthbox.lock'

          echo "Uploading debs"
          scp -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ../*.deb aptly@repo.zynthbox.io:/mnt/pub_zynthbox_io_volume/temp/
          echo "Adding package(s) to repository"

          if [ "$RELEASE" = "bookworm" ]; then
            for pkg in $(ls -1 ../*.deb)
              do
                echo "Adding ${pkg}"
                ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa aptly@repo.zynthbox.io 'aptly repo add -remove-files '"${APTLY_REPO}-bookworm"' /mnt/pub_zynthbox_io_volume/temp/${pkg}'
            done
            echo "Publishing repository"
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa aptly@repo.zynthbox.io 'aptly publish update bookworm '"${APTLY_REPO}-bookworm"
            echo "Cleaning up"
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa aptly@repo.zynthbox.io 'if [[ -f /tmp/working ]];then rm /tmp/working;fi'
            echo "Generate list of packages"
            ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa aptly@repo.zynthbox.io 'aptly repo show -with-packages '"${APTLY_REPO}-bookworm"' > '"~/.aptly/public/${APTLY_REPO}-bookworm/${APTLY_REPO}-bookworm.list"
          else
            echo "CANNOT PUBLISH DEBS. UNKNOWN RELEASE $RELEASE"
          fi

          ### Delete lock file /tmp/publish-aptly-zynthbox.lock for other aptly jobs to continue
          echo "Removing lock file"
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa aptly@repo.zynthbox.io 'if [[ -f /tmp/publish-aptly-zynthbox.lock ]]; then rm /tmp/publish-aptly-zynthbox.lock; fi'
          set +x